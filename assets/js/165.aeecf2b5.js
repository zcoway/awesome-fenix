(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{706:function(s,e,a){"use strict";a.r(e);var t=a(11),l=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"运行、编译与调试环境"}},[s._v("运行、编译与调试环境")]),s._v(" "),a("h2",{attrs:{id:"运行"}},[s._v("运行")]),s._v(" "),a("p",[s._v("由于K3S是单文件发行的，直接在发布页（https://github.com/k3s-io/k3s/releases）中下载，放到PATH路径上即可运行。")]),s._v(" "),a("p",[s._v("源码也可以从发布页中下载source.zip，以保证相同版本，也可以直接在GitHub仓库中拉取（https://github.com/k3s-io/k3s/）")]),s._v(" "),a("h2",{attrs:{id:"编译"}},[s._v("编译")]),s._v(" "),a("p",[s._v("K3S是依靠Rancher自家的Dapper来编译，Dapper的作用是在Docker镜像中完成程序构建，以保证在不同机器上都能得到一个稳定的编译环境，屏蔽机器环境对编译的影响，也减轻了准备编译环境的工作负担。")]),s._v(" "),a("p",[s._v("我们重新编译K3S是为了得到一个禁用优化、带有调试符号信息的版本，以便下一步调试运行使用。根据国内的实际情况，有以下几个可选项建议改动：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("K3S是直接使用golang-alpine的基础镜像的，然后再使用Docker-in-Docker来运行CI环境，由于Dapper文件经常要被反复运行，所以建议自己构建一个基础镜像，代替golang-alpine，节省每次运行时apk安装环境的时间。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("FROM golang:1.15.5-alpine3.12\n\nRUN apk -U --no-cache add bash git gcc musl-dev docker vim less file curl wget ca-certificates jq linux-headers zlib-dev tar zip squashfs-tools npm coreutils \\\n    python2 openssl-dev libffi-dev libseccomp libseccomp-dev make libuv-static sqlite-dev sqlite-static libselinux libselinux-dev zlib-dev zlib-static\n")])])])]),s._v(" "),a("li",[a("p",[s._v("编译文件中写死了给链接器参数加"),a("code",[s._v("-w -s")]),s._v("参数删除调试的符号表信息，这个是Kubernetes原版就有的传统了。手动在编译文件中删除掉，并加入编译器参数，禁用优化和方法内联：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 编译器参数：-N是禁用优化，-l是禁止方法内联\ngcflags="all=-N -l"\n\n# 链接器参数：将原来的-w -s删除掉\n# 注意链接器参数除了在scrips/build文件外，在打all-in-one package的script/build中也存在\nldflags=""\n')])])])]),s._v(" "),a("li",[a("p",[s._v("编译的最后一步是调用binary_size_check.sh，检查编译结果的大小，1.20版的最大容量为61 MB，但加入调试的符号信息之后，会膨胀至83 MB左右，所以这里要改一下以下常量：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#原本是MAX_BINARY_SIZE=61000000，这里改到了100 MB\nMAX_BINARY_SIZE=100000000\n")])])])]),s._v(" "),a("li",[a("p",[s._v("由于我们修改过编译文件，所以要将文件校验开关给关闭掉，在Dapper文件中加入环境变量：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ENV SKIP_VALIDATE=true\n")])])])]),s._v(" "),a("li",[a("p",[s._v("最后，如果访问外网有困难，请在Dapper中加上代理：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ARG http_proxy=socks5://192.168.31.125:2012\nARG https_proxy=socks5://192.168.31.125:2012\n")])])])])]),s._v(" "),a("p",[s._v("然后直接make一下，就可以在dist/artifacts目录中找到k3s了")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("make\n")])])]),a("h2",{attrs:{id:"调试"}},[s._v("调试")]),s._v(" "),a("p",[s._v("k3s的All-In-One包的入口是"),a("code",[s._v("cmd/k3s/main.go")]),s._v("，这里的作用就是自动在一个临时目录（默认为"),a("code",[s._v("/var/lib/rancher/k3s")]),s._v("）中，解压出所有运行所需的命令，然后通过"),a("code",[s._v("stageAndRun()")]),s._v("方法在子进程中调用。")])])}),[],!1,null,null,null);e.default=l.exports}}]);