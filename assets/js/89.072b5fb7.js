(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{588:function(t,e,i){"use strict";i.r(e);var l=i(11),r=Object(l.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"透明多级分流系统"}},[t._v("透明多级分流系统")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("奥卡姆剃刀原则")]),t._v(" "),i("p",[t._v("Entities should not be multiplied without necessity")]),t._v(" "),i("p",[t._v("如无必要，勿增实体")]),t._v(" "),i("div",{staticClass:"custom-block right"},[i("p",[t._v("—— "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Occam%27s_razor",target:"_blank",rel:"noopener noreferrer"}},[t._v("Occam's Razor"),i("OutboundLink")],1),t._v("，"),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/William_of_Ockham",target:"_blank",rel:"noopener noreferrer"}},[t._v("William of Ockham"),i("OutboundLink")],1)])])]),t._v(" "),i("p",[t._v("现代的企业级或互联网系统，“分流”是必须要考虑的设计，分流所使用手段数量之多、涉及场景之广，可能连它的开发者本身都未必能全部意识到。这听起来似乎并不合理，但笔者认为这恰好是优秀架构设计的一种体现，“分布广阔”源于“多级”，“意识不到”谓之“透明”，也即本章我们要讨论的主题“"),i("strong",[t._v("透明多级分流系统")]),t._v("”（Transparent Multilevel Diversion System， “透明多级分流系统”这个词是笔者自己创造的，业内通常只提“Transparent Multilevel Cache”，但我们这里谈的并不仅仅涉及到缓存）的来由。")]),t._v(" "),i("p",[t._v("在用户使用信息系统的过程中，请求从浏览器出发，在域名服务器的指引下找到系统的入口，经过网关、负载均衡器、缓存、服务集群等一系列设施，最后触及到末端存储于数据库服务器中的信息，然后逐级返回到用户的浏览器之中。这其中要经过很多技术部件。作为系统的设计者，我们应该意识到不同的设施、部件在系统中有各自不同的价值。")]),t._v(" "),i("ul",[i("li",[t._v("有一些部件位于客户端或网络的边缘，能够迅速响应用户的请求，避免给后方的 I/O 与 CPU 带来压力，典型如本地缓存、内容分发网络、反向代理等。")]),t._v(" "),i("li",[t._v("有一些部件的处理能力能够线性拓展，易于伸缩，可以使用较小的代价堆叠机器来获得与用户数量相匹配的并发性能，应尽量作为业务逻辑的主要载体，典型如集群中能够自动扩缩的服务节点。")]),t._v(" "),i("li",[t._v("有一些部件稳定服务对系统运行有全局性的影响，要时刻保持着容错备份，维护着高可用性，典型如服务注册中心、配置中心。")]),t._v(" "),i("li",[t._v("有一些设施是天生的单点部件，只能依靠升级机器本身的网络、存储和运算性能来提升处理能力，如位于系统入口的路由、网关或者负载均衡器（它们都可以做集群，但一次网络请求中无可避免至少有一个是单点的部件）、位于请求调用链末端的传统关系数据库等，都是典型的容易形成单点部件。")])]),t._v(" "),i("p",[t._v("对系统进行流量规划时，我们应该充分理解这些部件的价值差异，有两条简单、普适的原则能指导我们进行设计：")]),t._v(" "),i("ul",[i("li",[t._v("第一条原则是尽可能减少单点部件，如果某些单点是无可避免的，则应尽最大限度减少到达单点部件的流量。在系统中往往会有多个部件能够处理、响应用户请求，譬如要获取一张存储在数据库的用户头像图片，浏览器缓存、内容分发网络、反向代理、Web 服务器、文件服务器、数据库都可能提供这张图片。恰如其分地引导请求分流至最合适的组件中，避免绝大多数流量汇集到单点部件（如数据库），同时依然能够在绝大多数时候保证处理结果的准确性，使单点系统在出现故障时自动而迅速地实施补救措施，这便是系统架构中多级分流的意义。")]),t._v(" "),i("li",[t._v("另一条更关键的原则是奥卡姆剃刀原则。作为一名架构设计者，你应对多级分流的手段有全面的理解与充分的准备，同时清晰地意识到这些设施并不是越多越好。在实际构建系统时，你应当在有明确需求、真正必要的时候再去考虑部署它们。不是每一个系统都要追求高并发、高可用的，根据系统的用户量、峰值流量和团队本身的技术与运维能力来考虑如何部署这些设施才是合理的做法，在能满足需求的前提下，"),i("strong",[t._v("最简单的系统就是最好的系统")]),t._v("。")])]),t._v(" "),i("p",[t._v("本章，笔者将会根据流量从客户端发出到服务端处理这个过程里，所流经的与功能无关的技术部件为线索，解析这里面每个部件的透明工作原理与起到的分流作用。这节所讲述的客户端缓存、域名服务器、传输链路、内容分发网络、负载均衡器、服务端缓存，都是为了达成“透明分流”这个目标所采用的工具与手段，高可用架构、高并发则是通过“透明分流”所获得的价值。")])])}),[],!1,null,null,null);e.default=r.exports}}]);