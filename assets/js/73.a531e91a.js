(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{569:function(s,t,a){"use strict";a.r(t);var e=a(11),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"部署-docker-ce-容器环境"}},[s._v("部署 Docker CE 容器环境")]),s._v(" "),a("p",[s._v("本文为 Linux 系统安装 Docker 容器环境的简要说明，主要包括：")]),s._v(" "),a("ol",[a("li",[s._v("安装稳定最新发行版（Stable Release）的命令及含义。")]),s._v(" "),a("li",[s._v("针对国内网络环境的必要镜像加速或者代理设置工作。")])]),s._v(" "),a("p",[s._v("若需了解 Docker 安装其他方面的内容，如安装 Nightly/Test 版本、Backporting、软件版权和支持等信息，可参考官方的部署指南："),a("a",{attrs:{href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.docker.com/install/"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("文中涉及到的 Debian 系和 Redhat 系的包管理工具，主要包括：")]),s._v(" "),a("ul",[a("li",[s._v("Debian 系：Debian、Ubuntu、Deepin、Mint")]),s._v(" "),a("li",[s._v("Redhat 系：RHEL、Fedora、CentOS")])]),s._v(" "),a("p",[s._v("如用的其他 Linux 发行版，如 Gentoo、Archlinux、OpenSUSE 等，建议自行安装二进制包。")]),s._v(" "),a("h2",{attrs:{id:"移除旧版本-docker"}},[s._v("移除旧版本 Docker")]),s._v(" "),a("p",[s._v("如果以前已经安装过旧版本的 Docker（可能会被称为 docker，docker.io 或 docker-engine），需先行卸载。")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" remove docker docker-engine docker.io containerd runc docker-ce docker-ce-cli containerd.io\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum remove docker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-client "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-client-latest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-common "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-latest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-latest-logrotate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-logrotate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                  docker-engine\n")])])])]),s._v(" "),a("h2",{attrs:{id:"安装-docker-依赖工具链及软件源"}},[s._v("安装 Docker 依赖工具链及软件源")]),s._v(" "),a("p",[s._v("在 Debian 上主要是为了 apt 能够正确使用 HTTPS 协议，并将 Docker 官方的 GPG Key（GNU Privacy Guard，包的签名机制）和软件源地址注册到软件源中。")]),s._v(" "),a("p",[s._v("在 RHEL 上是为了 devicemapper 获得 yum-config-manager、device-mapper-persistent-data、lvm2 的支持。")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" apt-transport-https "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                       ca-certificates "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                       "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                       software-properties-common\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注册Docker官方GPG公钥")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://download.docker.com/linux/debian/gpg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查Docker官方GPG公钥指纹是否正确")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key fingerprint 0EBFCD88\n\npub   4096R/0EBFCD88 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2017")]),s._v("-02-22\n      Key fingerprint "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 9DC8 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5822")]),s._v(" 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CE deb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("docker@docker.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsub   4096R/F273FCD8 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2017")]),s._v("-02-22\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将Docker地址注册到软件源中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意$(lsb_release -cs)是返回当前发行版的版本代号，例如Ubuntu 18.04是bionic，19.10是eoan")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 但在Ubuntu 19.10发布一段时间后，Docker官方并未在源地址中增加eoan目录，导致此命令安装失败，日后在最新的系统上安装Docker，需要注意排查此问题，手动更改版本代号完成安装")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" add-apt-repository "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n    '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("lsb_release -cs"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' \\\n    stable"')]),s._v("\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y yum-utils "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                      device-mapper-persistent-data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n                      lvm2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将Docker地址注册到软件源中")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum-config-manager "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n       --add-repo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n       https://download.docker.com/linux/centos/docker-ce.repo\n")])])])]),s._v(" "),a("h2",{attrs:{id:"更新系统软件仓库"}},[s._v("更新系统软件仓库")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum update\n")])])])]),s._v(" "),a("h2",{attrs:{id:"安装-docker-engine-community"}},[s._v("安装 Docker-Engine Community")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-ce docker-ce-cli containerd.io\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-ce docker-ce-cli containerd.io\n")])])])]),s._v(" "),a("h2",{attrs:{id:"确认-docker-安装是否成功"}},[s._v("确认 Docker 安装是否成功")]),s._v(" "),a("p",[s._v("直接运行官方的 hello-world 镜像测试安装是否成功")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run hello-world\n")])])]),a("h2",{attrs:{id:"配置国内镜像库"}},[s._v("配置国内镜像库 "),a("Badge",{attrs:{text:"可选",type:"warning"}})],1),s._v(" "),a("p",[s._v("由于 Docker 官方镜像在国内访问缓慢，官方提供了在国内的镜像库："),a("a",{attrs:{href:"https://registry.docker-cn.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://registry.docker-cn.com"),a("OutboundLink")],1),s._v("，以加快访问速度（但其实体验也并不快）。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该配置文件及目录，在Docker安装后并不会自动创建")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /etc/docker\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置加速地址")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/docker/daemon.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<-")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'EOF\'\n{\n   "registry-mirrors": ["https://registry.docker-cn.com"]\n}\nEOF')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启服务")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl daemon-reload\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl restart docker\n")])])]),a("blockquote",[a("p",[a("strong",[s._v("注意")])]),s._v(" "),a("p",[s._v("以上操作有两点提醒读者重点关注：")]),s._v(" "),a("ol",[a("li",[s._v("必须保证 daemon.json 文件中完全符合 JSON 格式，如果错了，Docker 不会给提示，直接起不来。")]),s._v(" "),a("li",[s._v("如果 Docker 是作为 systemd 管理的服务的，daemon.json 文件会处于锁定状态，应先关闭后再修改配置；")])])]),s._v(" "),a("p",[s._v("这两点出了问题都会导致 Docker 服务直接无法启动，如果出现该情况，可以通过 systemd status 命令检查，看是否有类似如下的错误提示：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v(" Drop-In: /etc/systemd/system/docker.service.d\n           └─mirror.conf\n   Active: inactive "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Result: exit-code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" since 五 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2017")]),s._v("-09-15 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":25:28 CST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 7min ago\n     Docs: https://docs.docker.com\n Main PID: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21151")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("code"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("exited, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("status")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/FAILURE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("如果是，修改 daemon.json 后重新启动即可。另外，关闭 systemd 服务的方法是：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl stop docker\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /etc/systemd/system/docker.service.d\n")])])]),a("p",[s._v("最后，Docker 的官方国内镜像库的速度只能说比起访问国外好了一丢丢，聊胜于无。国内还有一些公开的镜像库，如微软的、网易的等，但要么是不稳定，要么也是慢。比较靠谱的是阿里云的镜像库，但这个服务并不是公开的，需要使用者先到阿里云去申请开发者账户，再使用加速服务，申请后会得一个类似于“https://yourname.mirror.aliyuncs.com”的私有地址，把它设置到daemon.json中即可使用。")]),s._v(" "),a("h2",{attrs:{id:"为-docker-设置代理"}},[s._v("为 Docker 设置代理 "),a("Badge",{attrs:{text:"可选",type:"warning"}})],1),s._v(" "),a("p",[s._v("另外一种解决 Docker 镜像下载速度慢的方案就是使用代理，Docker 的代理可以直接读取系统的全局代理，即系统中的 HTTP_PROXY、HTTPS_PROXY 两个环境变量。不过，如果设置这两个变量，其他大量 Linux 下的其他工具也会受到影响，所以建议的方式是给 Docker 服务设置专有的环境变量，我们使用 Systemd 来管理 Docker 服务，那直接给这个服务设置一个额外配置即可，操作如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /etc/systemd/system/docker.service.d\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置代理地址，支持http、https、socks、socks5等协议")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/systemd/system/docker.service.d/http-proxy.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<-")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'EOF'\n[Service]\nEnvironment=\"HTTP_PROXY=socks5://192.168.31.125:2012\"\nEOF")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重启docker")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl restart docker\n")])])]),a("p",[s._v("设置后可以通过 systemctl 检查一下环境变量，看看是否有设置成功：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ systemctl show --property"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Environment docker\n")])])]),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Environment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("HTTP_PROXY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("socks5://192.168.31.125:2012\n")])])]),a("h2",{attrs:{id:"开放-docker-远程服务"}},[s._v("开放 Docker 远程服务 "),a("Badge",{attrs:{text:"可选",type:"warning"}})],1),s._v(" "),a("p",[s._v("如果需要在其他机器上管理 Docker——譬如典型的如在 IntelliJ IDEA 这类 IDE 环境中给远程 Docker 部署镜像，那可以开启 Docker 的远程管理端口，这步没有设置任何安全访问措施，请不要在生产环境中进行。")]),s._v(" "),a("p",[s._v("具体做法是修改 Docker 的服务配置：")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /lib/systemd/system/docker.service\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /usr/lib/systemd/system/docker.service\n")])])])]),s._v(" "),a("p",[s._v("在 ExexStart 后面增加以下参数（2375 端口可以自定义）：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n")])])]),a("p",[s._v("譬如，默认安装完 Docker，修改之后完整的 ExexStart 应当如下所示：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ExecStart")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/bin/dockerd -H fd:// --containerd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n")])])]),a("p",[s._v("最后重启 Docker 服务即可：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重启docker")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl daemon-reload\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl restart docker\n")])])]),a("h2",{attrs:{id:"启用-docker-命令行自动补全功能"}},[s._v("启用 Docker 命令行自动补全功能 "),a("Badge",{attrs:{text:"可选",type:"warning"}})],1),s._v(" "),a("p",[s._v("在控制台输入 docker 命令时可以获得自动补全能力，提高效率。")]),s._v(" "),a("p",[s._v("Docker 自带了 bash 的命令行补全，用其他 shell，如 zsh，则需采用 zsh 的插件或者自行获取补全信息")]),s._v(" "),a("blockquote",[a("p",[s._v("bash：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'source /usr/share/bash-completion/completions/docker'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.bashrc\n")])])]),a("p",[s._v("zsh：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.zsh/completion\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://raw.githubusercontent.com/docker/cli/master/contrib/completion/zsh/_docker "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ~/.zsh/completion/_docker\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fpath=(~/.zsh/completion "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$fpath")]),s._v(")'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.zshrc\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'autoload -Uz compinit && compinit -u'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.zshrc\n")])])])]),s._v(" "),a("h2",{attrs:{id:"将-docker-设置为开机启动"}},[s._v("将 Docker 设置为开机启动 "),a("Badge",{attrs:{text:"可选",type:"warning"}})],1),s._v(" "),a("p",[s._v("一般使用 systemd 来管理启动状态")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置为开机启动")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" docker\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 立刻启动Docker服务")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start docker\n")])])]),a("h2",{attrs:{id:"安装-docker-compose"}},[s._v("安装 Docker-Compose")]),s._v(" "),a("p",[s._v("在开发和部署微服务应用时，经常要使用 Docker-Compose 来组织多个镜像，对于 Windows 系统它是默认安装的，在 Linux 下需要另外下载一下，下载后直接扔到 bin 目录，加上执行权限即可使用")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从GitHub下载")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" -o /usr/local/bin/docker-compose\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从国内镜像下载")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" -o /usr/local/bin/docker-compose\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /usr/local/bin/docker-compose\n")])])]),a("h2",{attrs:{id:"卸载-docker"}},[s._v("卸载 Docker")]),s._v(" "),a("blockquote",[a("p",[s._v("Debian 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" purge docker-ce\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理Docker容器缓存和自定义配置")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /var/lib/docker\n")])])]),a("p",[s._v("RedHat 系：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum remove docker-ce\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理Docker容器缓存和自定义配置")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /var/lib/docker\n")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);