(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{570:function(e,t,n){"use strict";n.r(t);var r=n(11),u=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"部署-kubernetes-集群"}},[e._v("部署 Kubernetes 集群")]),e._v(" "),n("p",[e._v("Kubernetes 是一个由 Google 发起的开源自动化部署，缩放，以及容器化管理应用程序的容器编排系统。")]),e._v(" "),n("p",[e._v("部署 Kubernetes 曾经是一件相当麻烦的事情，早期版本中，Kubelet、Api-Server、Etcd、Controller-Manager 等每一个组件都需要自己单独去部署，还要创建自签名证书来保证各个组件之间的网络访问。但程序员大概是最爱与麻烦做斗争的群体，随着 Kubernetes 的后续版本不断改进（如提供了自动生成证书、Api-Server 等组件改为默认静态 Pod 部署方式），使得部署和管理 Kubernetes 集群正在变得越来越容易起来。目前主流的方式大致有：")]),e._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/appendix/deployment-env-setup/setup-kubernetes/setup-kubeadm.html"}},[e._v("使用 Kubeadm 部署 Kubernetes 集群")])],1),e._v(" "),n("li",[n("RouterLink",{attrs:{to:"/appendix/deployment-env-setup/setup-kubernetes/setup-rancher.html"}},[e._v("使用 Rancher 部署、管理 Kubernetes 集群")]),e._v("（其他如 KubeSphere 等在 Kubernetes 基础上构建的工具均归入此类）")],1),e._v(" "),n("li",[n("RouterLink",{attrs:{to:"/appendix/deployment-env-setup/setup-kubernetes/setup-minikube.html"}},[e._v("使用 Minikube 在本地单节点部署 Kubernetes 集群")]),e._v("（其他如 Microk8s 等本地环境的工具均归入此类）")],1)]),e._v(" "),n("p",[e._v("以上集中部署方式都有很明显的针对性，个人开发环境以 Minikube 最简单，生产环境以 Rancher 最简单，在云原生环境中，自然是使用环境提供的相应工具。不过笔者推荐首次接触 Kubernetes 的同学最好还是选择 Kubeadm 来部署，毕竟这是官方提供的集群管理工具，是相对更底层、基础的方式，充分熟悉了之后再接触其他简化的方式会快速融会贯通。 以上部署方式无需全部阅读，根据自己环境的情况选择其一即可。")])])}),[],!1,null,null,null);t.default=u.exports}}]);