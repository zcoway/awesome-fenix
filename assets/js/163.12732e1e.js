(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{704:function(e,r,o){"use strict";o.r(r);var v=o(11),n=Object(v.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"k8s-apiserver启动过程"}},[e._v("K8S-APIServer启动过程")]),e._v(" "),o("p",[e._v("启动入口："),o("code",[e._v("k8s.io/kubernetes/cmd/kube-apiserver/app/server.go::Run()")]),e._v("，内部调用了两个方法：")]),e._v(" "),o("ol",[o("li",[o("p",[o("code",[e._v("CreateServerChain()")]),e._v("，名字中 “Server Chain”包含了API Extensions Server、Kube API Server、Aggregator Server三个服务器的资源配置及路由创建。")]),e._v(" "),o("ol",[o("li",[o("strong",[e._v("API Extensions Server")]),e._v("包含了对用户自定义扩展资源（CRD/CR）的支持，譬如增加一个CRD，它用到的API Version、Group、Handler、Hook等功能，涉及到一系列的Controller，如Discovery、Naming、NonStructruraSchema、ApiApproval、Finalizing等等。每一个Controller都会在一条goroutine中执行它的Run()方法，具体Controller如下：\n"),o("ol",[o("li",[o("code",[e._v("openapiController")]),e._v("：将CRD资源的变化同步至提供的OpenAPI文档，可通过访问 "),o("code",[e._v("/openapi/v2")]),e._v("进行查看；")]),e._v(" "),o("li",[o("code",[e._v("crdController")]),e._v("：负责将CRD信息注册到apiVersions和apiResources中，两者的信息可通过"),o("code",[e._v("$ kubectl api-versions")]),e._v("和"),o("code",[e._v("$ kubectl api-resources")]),e._v("查看；")]),e._v(" "),o("li",[o("code",[e._v("namingController")]),e._v("：检查CRD对象是否有命名冲突，可在"),o("code",[e._v("crd.status.conditions")]),e._v("中查看；")]),e._v(" "),o("li",[o("code",[e._v("establishingController")]),e._v("：检查CRD是否处于正常状态，可在"),o("code",[e._v("crd.status.conditions")]),e._v("中查看；")]),e._v(" "),o("li",[o("code",[e._v("nonStructuralSchemaController")]),e._v("：检查CRD对象结构是否正常，可在"),o("code",[e._v("crd.status.conditions")]),e._v("中查看；")]),e._v(" "),o("li",[o("code",[e._v("apiApprovalController")]),e._v("：检查CRD是否遵循Kubernetes API声明策略，可在"),o("code",[e._v("crd.status.conditions")]),e._v("中查看；")]),e._v(" "),o("li",[o("code",[e._v("finalizingController")]),e._v("：类似于finalizes的功能，与CR的删除有关；")])])]),e._v(" "),o("li",[o("strong",[e._v("Kube API Server")]),e._v("包含了对传统核心资源（Legacy API，就是以"),o("code",[e._v("/api")]),e._v("开头的资源），譬如Pod、Event、LimitRange、ResourceQuote等等，以及扩展资源（就是以"),o("code",[e._v("/apis")]),e._v("开头的资源，如"),o("code",[e._v("/apis/batch")]),e._v("、"),o("code",[e._v("/aps/extensions")]),e._v("），譬如Jobs、CronJobs、Namspaces的支持，这些都是在Kubernetes中以编码固定（不像CRD那样通过外部配置扩展）的资源，如何与APIServer交互都是由固定的内部函数来完成的。此外，Kube API Server还负责对请求的通用前置处理，如认证、授权等。\n"),o("ol",[o("li",[o("code",[e._v("GenericAPIServer.NewDefaultAPIGroupInfo()")]),e._v("中读取默认的API资源信息。")]),e._v(" "),o("li",[o("code",[e._v("GenericAPIServer.InstallAPIGroups()")]),e._v("中注册API资源，即将根据其定义，生成REST Endpoint供外部访问，并加入到DiscoveryManager中，供外部访问。")])])]),e._v(" "),o("li",[o("strong",[e._v("Aggregator Server")]),e._v("聚合了API Extensions Server的自定义资源和Kube API Server的核心资源，功能类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个APIServer的Discovery功能，与API Extensions Server类似，Aggregator Server中也包含了一系列的Controller，其作用如下：\n"),o("ol",[o("li",[o("code",[e._v("apiserviceRegistrationController")]),e._v("：负责APIServices中资源的注册与删除；")]),e._v(" "),o("li",[o("code",[e._v("availableConditionController")]),e._v("：维护APIServices的可用状态，包括其引用Service是否可用等；")]),e._v(" "),o("li",[o("code",[e._v("autoRegistrationController")]),e._v("：用于保持API中存在的一组特定的APIServices；")]),e._v(" "),o("li",[o("code",[e._v("crdRegistrationController")]),e._v("：负责将CRD GroupVersions自动注册到APIServices中；")]),e._v(" "),o("li",[o("code",[e._v("openAPIAggregationController")]),e._v("：将APIServices资源的变化同步至提供的OpenAPI文档；")])])])])]),e._v(" "),o("li",[o("p",[e._v("在API Extensions Server、Kube API Server、Aggregator Server三个服务器完成Controller注册和启动之后，会调用"),o("code",[e._v("APIAggregator.PrepareRun()")]),e._v("，启动整个delegation链的运作，这步主要动作是调用"),o("code",[e._v("delegationTarget.PrepareRun()")]),e._v("和注册好Healths\\Lives\\Readys三个探针Endpoint")])]),e._v(" "),o("li",[o("p",[e._v("执行"),o("code",[e._v("preparedAPIAggregator.Run()")]),e._v("，启动一个HTTP服务器，对外提供API访问服务。")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);